# -*- coding: utf-8 -*-
"""lab03_linear_discrimination.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-d04rl3W51s3Fgg12MqV6-PblAAmjlBk
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


def safelog(x):
    return(np.log(x + 1e-100))

"""## Parameters"""

np.random.seed(421)

class_means = np.array([[0.0, +2.5],
                        [-2.5, -2.0],
                        [+2.5, -2.0]])

class_covariances = np.array([[[+3.2, +0.0], 
                               [+0.0, +1.2]],
                              [[+1.2, +0.8], 
                               [+0.8, +1.2]],
                               [[+1.2, -0.8],
                                [-0.8, +1.2]]])

class_sizes = np.array([120, 80, 100])

"""## Data Generation"""

points1 = np.random.multivariate_normal(class_means[0,:], class_covariances[0,:,:], class_sizes[0])
points2 = np.random.multivariate_normal(class_means[1,:], class_covariances[1,:,:], class_sizes[1])
points3 = np.random.multivariate_normal(class_means[2,:], class_covariances[2,:,:], class_sizes[2])
X = np.vstack((points1, points2, points3))

y = np.concatenate((np.repeat(1, class_sizes[0]), np.repeat(2, class_sizes[1]), np.repeat(3, class_sizes[2])))

"""##Â Plotting Data"""

plt.figure(figsize = (10, 10))
plt.plot(points1[:,0], points1[:,1], "r.", markersize = 10)
plt.plot(points2[:,0], points2[:,1], "g.", markersize = 10)
plt.plot(points3[:,0], points3[:,1], "b.", markersize = 10)

plt.show()

sample_means = np.array([[np.sum(points1[:,0])/class_sizes[0], np.sum(points1[:,1])/class_sizes[0]],
                        [np.sum(points2[:,0])/class_sizes[1], np.sum(points2[:,1])/class_sizes[1]],
                        [np.sum(points3[:,0])/class_sizes[2], np.sum(points3[:,1])/class_sizes[2]]])
print(sample_means ,"\n")


data = np.array([[np.sum(points1[:,0])/class_sizes[0], np.sum(points1[:,1])/class_sizes[0]],
                        [np.sum(points2[:,0])/class_sizes[1], np.sum(points2[:,1])/class_sizes[1]],
                        [np.sum(points3[:,0])/class_sizes[2], np.sum(points3[:,1])/class_sizes[2]]])

covMatrix = np.cov(data, bias = True)
print(covMatrix)

class_priors = [np.mean(y == (c + 1)) for c in range(3)]
print(class_priors)